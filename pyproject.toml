[build-system]
requires = ["setuptools>=68.0,<78.2", "wheel>=0.40,<0.46"]
build-backend = "setuptools.build_meta"

[project]
name = "aiohasupervisor"
license = { text = "Apache-2.0" }
description = "Asynchronous python client for Home Assistant Supervisor."
readme = "README.md"
authors = [
    { name = "The Home Assistant Authors", email = "hello@home-assistant.io" },
]
keywords = ["docker", "home-assistant", "api", "client-library"]
requires-python = ">=3.12.0"
dependencies = [
    "aiohttp>=3.3.0,<4.0.0",
    "mashumaro>=3.11,<4.0",
    "orjson>=3.6.1,<4.0.0",
]
# The version is set by GH action on release!
version = "0.0.0"

[project.optional-dependencies]
dev = [
    # Production requirements
    "aiohttp==3.11.16",
    "mashumaro==3.13.1",
    "orjson==3.10.16",

    # Test requirements
    "aioresponses==0.7.8",
    "codespell==2.4.1",
    "coverage==7.8.0",
    "mypy==1.15.0",
    "pre-commit==4.2.0",
    "pytest-aiohttp==1.1.0",
    "pytest-cov==6.1.1",
    "pytest-timeout==2.3.1",
    "pytest==8.3.5",
    "ruff==0.11.4",
    "yamllint==1.37.0",
]

[project.urls]
"Homepage" = "https://www.home-assistant.io/"
"Source Code" = "https://github.com/home-assistant-libs/python-supervisor-client"
"Bug Reports" = "https://github.com/home-assistant-libs/python-supervisor-client/issues"
"Docs: Dev" = "https://developers.home-assistant.io/"
"Discord" = "https://www.home-assistant.io/join-chat/"
"Forum" = "https://community.home-assistant.io/"

[tool.setuptools]
platforms = ["any"]
zip-safe = false
include-package-data = true

[tool.setuptools.package-data]
"aiohasupervisor" = ["py.typed"]

[tool.setuptools.packages.find]
include = ["aiohasupervisor*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
norecursedirs = [".git"]
log_format = "%(asctime)s.%(msecs)03d %(levelname)-8s %(threadName)s %(name)s:%(filename)s:%(lineno)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning:dirhash",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]

[tool.ruff]
lint.select = ["ALL"]
lint.ignore = [
    "ANN401",  # Opinionated warning on disallowing dynamically typed expressions
    "D203",    # Conflicts with other rules
    "D213",    # Conflicts with other rules
    "EM",      # flake8-errmsg, more frustration then value
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "TRY003",  # Avoid specifying long messages outside the exception class

    # Recommended to disable due to conflicts with formatter
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "COM812",
    "COM819",
    "D206",
    "D300",
    "E111",
    "E114",
    "E117",
    "ISC001",
    "ISC002",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"pytz".msg = "use zoneinfo instead"

[tool.ruff.lint.isort]
force-sort-within-sections = true
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
forced-separate = ["tests"]
known-first-party = ["aiohasupervisor", "tests"]
combine-as-imports = true

[tool.ruff.lint.mccabe]
max-complexity = 25
